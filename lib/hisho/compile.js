// Generated by CoffeeScript 1.7.1
(function() {
  (function(global) {
    var build, colors, config, cwd, directoryIterator, fs, makeDir, parseComponents, parsePages, path, _;
    fs = require('fs');
    path = require('path');
    _ = require('underscore');
    colors = require('colors');
    cwd = process.cwd();
    config = require(cwd + '/hisho_config.js');
    parseComponents = require("./parseComponents").parseComponents;
    parsePages = require("./parsePages").parsePages;
    build = require("./build").build;
    makeDir = require('./makeDir');
    directoryIterator = require('./directoryIterator');
    return module.exports = {
      components: function(callback) {
        var inputDir;
        console.log('\nRunning compile processing of "Component files".\n'.yellow);
        inputDir = path.join(config.directory.input, config.directory.components);
        directoryIterator({
          dir: inputDir,
          filter: function(filePath) {
            if (filePath.match(/.*\.html$/) || !filePath.match(/.*\..*?$/)) {
              return true;
            } else {
              return false;
            }
          },
          onFile: function(filePath) {
            var datas, fileData;
            fileData = fs.readFileSync(filePath, "utf8");
            datas = parseComponents.parse(filePath, fileData);
            _.each(datas, function(v, k) {
              if (v) {
                makeDir(v.path);
                return fs.writeFileSync(v.path, v.code, 'utf8');
              }
            });
            console.log('Compile of ' + path.dirname(filePath));
            return true;
          },
          onCompleate: function() {
            if (callback) {
              return callback();
            }
          }
        });
        return false;
      },
      pages: function(callback) {
        var inputDir;
        console.log('\nRunning compile processing of "Page files".\n'.yellow);
        inputDir = config.directory.input;
        directoryIterator({
          dir: inputDir,
          filter: function(filePath) {
            var str;
            str = config.directory.components.replace("/", "");
            if (!filePath.match(str)) {
              return true;
            } else {
              return false;
            }
          },
          onFile: function(filePath) {
            var datas, fileData;
            fileData = fs.readFileSync(filePath, "utf8");
            datas = parsePages.parse(filePath, fileData);
            _.each(datas, function(v, k) {
              if (v) {
                makeDir(v.path);
                return fs.writeFileSync(v.path, v.code, 'utf8');
              }
            });
            console.log('Compile of ' + filePath);
            return true;
          },
          onCompleate: function() {
            if (callback) {
              return callback();
            }
          }
        });
        return false;
      },
      build: function(minify) {
        console.log('Running build processing of "Static files".\n'.yellow);
        build.initialize();
        return false;
      },
      all: function(minify) {
        var comp;
        this.build();
        return false;
        comp = this.components((function(_this) {
          return function() {
            return _this.pages(function() {
              return _this.build();
            });
          };
        })(this));
        return false;
      }
    };
  })(this);

}).call(this);
