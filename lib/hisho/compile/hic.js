// Generated by CoffeeScript 1.7.1
(function() {
  (function(global, hisho) {
    var colors, compiler, compilerInfo, coreModule, fs, path, subModule, _;
    fs = require('fs');
    path = require('path');
    _ = require('underscore');
    colors = require('colors');
    compiler = hisho.getCompiler("name");
    compilerInfo = hisho.getCompiler("type");
    subModule = {
      type: "hic",
      message: {
        start: "BUILD.HIC.START",
        create: "BUILD.HIC.COMPILE"
      },
      selector: {
        template: null,
        scripts: null,
        "import": null,
        removeTag: null
      },
      compileMethod: "compileHic",
      initialize: function(minify, callback) {
        if (callback == null) {
          callback = function() {};
        }
        hisho.showMessage(this.message.start);
        this.tmp = {
          update: {},
          compile: {},
          "import": {},
          beforeUpdate: hisho.getData(hisho.template(this.filePath.update, {
            type: this.type
          })),
          beforeCompile: hisho.getData(hisho.template(this.filePath.compile, {
            type: this.type
          }))
        };
        hisho.deleteFile("hic", "output");
        hisho.dirIterator({
          dir: this._getInputDir(),
          filter: (function(_this) {
            return function(filePath) {
              return _this._hasTargetFile(filePath);
            };
          })(this),
          onGetFile: (function(_this) {
            return function(filePath) {
              _.each(compiler, function(v, k) {
                var outputPath;
                if (filePath.match(v.extension.hic)) {
                  _this.temp.update[filePath] = fs.statSync(filePath, "utf8").mtime;
                  outputPath = _this._getOutputPath(filePath, v);
                  hisho.makeDir(outputPath);
                  v[_this.compileMethod]({
                    input: filePath,
                    output: outputPath,
                    minify: minify
                  }, function(stdout, stderr) {
                    return hisho.showMessage(_this.message.create, {
                      file: outputPath
                    });
                  });
                  if (!_this.temp.compile[filePath]) {
                    _this.temp.compile[filePath] = [];
                  }
                  _this.temp.compile[filePath].push(outputPath);
                  return false;
                }
              });
              return true;
            };
          })(this)
        });
        setTimeout((function(_this) {
          return function() {
            _this._deleteFile(_this.tmp.beforeUpdate, _this.tmp.update, _this.beforeCompile);
            hisho.setData(hisho.template(_this.filePath.update, {
              type: _this.type
            }), _this.temp.update);
            hisho.setData(hisho.template(_this.filePath.compile, {
              type: _this.type
            }), _this.temp.compile);
            return callback();
          };
        })(this), 150);
        return this;
      },
      _getInputDir: function() {
        return hisho.config.dir.hic;
      },
      _hasTargetFile: function(filePath) {
        var str;
        str = hisho.config.dir.components.replace("/", "");
        if (!filePath.match(str)) {
          return true;
        } else {
          return false;
        }
      },
      _getOutputPath: function(filePath, compileInfo) {
        var outputPathData, pathData, result;
        pathData = hisho.getPathData(filePath);
        outputPathData = {
          main: hisho.config.dir.output,
          type: compileInfo.dir.output,
          subDir: pathData.subDir,
          fileName: pathData.name + compileInfo.extension.output
        };
        result = hisho.template("./${main}/${type}/${subDir}/${fileName}", outputPathData);
        result = path.normalize(result);
        return result;
      }
    };
    coreModule = require('./core');
    return _.extend(module.exports, coreModule, subModule);
  })(global, global.hisho);

}).call(this);
