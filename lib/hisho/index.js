// Generated by CoffeeScript 1.7.1
(function() {
  (function() {
    var async, compile, dateUtils, hisho, hishoUtils, isMinify, isWatch, mode, nodeWatch, options, opts, pkg, showEndMessage, watchOption;
    async = require('async');
    opts = require("opts");
    nodeWatch = require('node-watch');
    dateUtils = require('date-utils');
    hishoUtils = require('./util/util');
    hisho = global.hisho = hishoUtils.initialize();
    compile = {
      components: require("./compile/components"),
      pages: require("./compile/pages"),
      hic: require("./compile/hic")
    };
    options = [
      {
        short: 'v',
        long: 'version',
        description: 'Show version',
        value: false,
        required: false
      }, {
        short: 'c',
        long: 'compile',
        description: 'compile files (all, components, pases, static)',
        value: true,
        required: false
      }, {
        short: 'w',
        long: 'watch',
        description: 'Run predefined tasks whenever watched files compile.',
        value: false,
        required: false
      }, {
        short: 'm',
        long: 'minify',
        description: 'Minify to sass and js files',
        value: false,
        required: false
      }
    ];
    opts.parse(options, true);
    isMinify = opts.get("minify") || false;
    isWatch = opts.get("watch") || false;
    mode = opts.get("version") ? "version" : opts.get("compile") || "all";
    showEndMessage = function(isWatch, startDate) {
      var endDate, time;
      endDate = new Date();
      time = (endDate - startDate) / 1000;
      hisho.showMessage("BUILD.END", {
        time: time,
        date: endDate.toFormat("YYYY.MM.DD HH24:MI:SS")
      });
      if (isWatch) {
        console.log(hisho.getMessage("WATCH.WAITING"));
      }
      return false;
    };
    watchOption = function(iswatch, callback) {
      var dirs;
      if (iswatch) {
        hisho.showMessage("WATCH.START");
        hisho.showMessage("WATCH.WAITING");
        dirs = [hisho.config.dir.input, hisho.config.dir.hic_tpl];
        nodeWatch(dirs, (function(_this) {
          return function(filename) {
            if (filename) {
              console.log(hisho.getMessage("COMMON.ARROW") + hisho.getMessage("WATCH.CHANGE", {
                file: filename
              }));
            } else {
              console.log(hisho.getMessage("COMMON.ARROW") + hisho.getMessage("WATCH.CREATE"));
            }
            return callback();
          };
        })(this));
      } else {
        callback();
      }
      return false;
    };
    switch (mode) {
      case "version":
        pkg = require("../../package.json");
        hisho.showMessage("v" + pkg.version);
        break;
      case "conponents":
        watchOption(isWatch, (function(_this) {
          return function() {
            var startDate;
            startDate = new Date();
            hisho.showMessage("BUILD.START");
            return async.series([
              function(callback) {
                return compile.components.initialize(isMinify, callback);
              }, function(callback) {
                return setTimeout(function() {
                  return showEndMessage(isWatch, startDate);
                }, 500);
              }
            ]);
          };
        })(this));
        break;
      case "pages":
        watchOption(isWatch, (function(_this) {
          return function() {
            var startDate;
            startDate = new Date();
            hisho.showMessage("BUILD.START");
            return async.series([
              function(callback) {
                return compile.pages.initialize(isMinify, callback);
              }, function(callback) {
                return setTimeout(function() {
                  return showEndMessage(isWatch, startDate);
                }, 500);
              }
            ]);
          };
        })(this));
        break;
      case "build":
        watchOption(isWatch, (function(_this) {
          return function() {
            var startDate;
            startDate = new Date();
            hisho.showMessage("BUILD.START");
            return async.series([
              function(callback) {
                return compile.hic.initialize(isMinify, callback);
              }, function(callback) {
                return setTimeout(function() {
                  return showEndMessage(isWatch, startDate);
                }, 500);
              }
            ]);
          };
        })(this));
        break;
      case "all":
        watchOption(isWatch, (function(_this) {
          return function() {
            var startDate;
            startDate = new Date();
            hisho.showMessage("BUILD.START");
            return async.series([
              function(callback) {
                return compile.components.initialize(isMinify, callback);
              }, function(callback) {
                return compile.pages.initialize(isMinify, callback);
              }, function(callback) {
                return compile.hic.initialize(isMinify, callback);
              }, function(callback) {
                return setTimeout(function() {
                  return showEndMessage(isWatch, startDate);
                }, 500);
              }
            ]);
          };
        })(this));
    }
  })();

}).call(this);
