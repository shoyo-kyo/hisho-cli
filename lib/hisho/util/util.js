// Generated by CoffeeScript 1.7.1
(function() {
  (function(global) {
    var fs, mkdirp, path, _;
    fs = require('fs');
    path = require('path');
    _ = require('underscore');
    mkdirp = require('mkdirp');
    return module.exports = {
      initialize: function() {
        this.config = require(process.cwd() + '/.hisho/config.js');
        this._message = require('./message');
        _.each(this.config.compiler.include, (function(_this) {
          return function(v, i) {
            var item, type, _i, _len, _ref, _results;
            item = require(v);
            _this._compilers.name[item.contentName] = item;
            _ref = item.contentType;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              type = _ref[_i];
              _results.push(_this._compilers.type[type] = item);
            }
            return _results;
          };
        })(this));
        return this;
      },
      config: {},
      _message: {},
      _compilers: {
        name: {},
        type: {}
      },
      getCompiler: function(type) {
        return this._compilers[type];
      },
      getMessage: function(type, datas) {
        var result;
        if (datas == null) {
          datas = null;
        }
        result = this._message[type];
        result = this.template(result, datas);
        return result;
      },
      showMessage: function(type, datas) {
        var message;
        if (datas == null) {
          datas = null;
        }
        message = this.getMessage(type, datas) || type;
        console.log(message);
        return false;
      },
      getData: function(filePath) {
        var error, result;
        result = null;
        try {
          result = fs.readFileSync(path.normalize(filePath), 'utf-8');
          result = JSON.parse(result);
        } catch (_error) {
          error = _error;
          result = null;
        }
        return result;
      },
      setData: function(filePath, json) {
        this.makeDir(filePath);
        json = JSON.stringify(json);
        fs.writeFileSync(path.normalize(filePath), json, 'utf8');
        return false;
      },
      getFileList: function(type) {
        var mainDirectory, result;
        mainDirectory = path.normalize("./" + this.config.dir[type]);
        result = {};
        this.makeDir(mainDirectory);
        this.dirIterator({
          dir: mainDirectory,
          onGetFile: (function(_this) {
            return function(filePath) {
              var name, pathData;
              if (filePath.match(/\.(.+?)$/g) !== null) {
                pathData = _this.getPathData(filePath);
                if (type === "output") {
                  _.each(_this.getCompiler("name"), function(v, k) {
                    return pathData.subDir = pathData.subDir.replace(v.dir.output, "");
                  });
                }
                name = pathData.name;
                if (name.match(/^_/g)) {
                  name = name.replace(/^_/g, "");
                }
                if (name.match(/\.[a-zA-Z]+?$/g)) {
                  name = name.replace(/^(.*?)\.[a-zA-Z]+?$/g, "$1");
                }
                name = pathData.subDir + "/" + name;
                if (!result[name]) {
                  result[name] = [];
                }
                return result[name].push(filePath);
              }
            };
          })(this)
        });
        return result;
      },
      deleteFile: function(input, output) {
        var inputFiles, outputFiles;
        inputFiles = hisho.getFileList(input);
        outputFiles = hisho.getFileList(output);
        _.each(outputFiles, (function(_this) {
          return function(v, k) {
            if (!inputFiles[k]) {
              _.each(v, function(v2) {
                fs.unlinkSync(v2);
                return _this.showMessage("DELETE.FILE", {
                  file: v2
                });
              });
              return false;
            }
          };
        })(this));
        return false;
      },
      getPathType: function(filePath) {
        var result;
        filePath = filePath.split(path.sep).join("/");
        if (filePath.match(new RegExp("(\|^)" + this.config.dir.input.replace(".", "\.") + "(\)", "i"))) {
          result = "input";
        } else if (filePath.match(new RegExp("(\|^)" + this.config.dir.hic.replace(".", "\.") + "(\)", "i"))) {
          result = "hic";
        } else if (filePath.match(new RegExp("(\|^)" + this.config.dir.output.replace(".", "\.") + "(\)", "i"))) {
          result = "output";
        }
        return result;
      },
      getPathData: function(filePath) {
        var result, subDir, type;
        filePath = path.normalize(filePath);
        filePath = filePath.split(path.sep).join("/");
        type = this.getPathType(filePath);
        subDir = filePath;
        result = {
          path: filePath,
          main: this.config.dir[type],
          component: null,
          subDir: null,
          name: path.basename(filePath, path.extname(filePath)),
          ex: path.extname(filePath)
        };
        if (filePath.match(new RegExp("\/" + this.config.dir.components + "\/", "g"))) {
          result.component = this.config.dir.components;
        }
        if (result.component) {
          subDir = subDir.replace(result.component, "");
        }
        subDir = subDir.replace(result.main, "").replace(new RegExp(result.name, "g"), "").replace(result.ex, "");
        if (type === "hic") {
          _.each(this.getCompiler("name"), (function(_this) {
            return function(v, k) {
              return subDir = subDir.replace(v.dir.hic, "");
            };
          })(this));
        }
        subDir = path.normalize(subDir).split(path.sep).join("/");
        result.subDir = subDir.replace(/^\//g, "").replace(/\/$/g, "");
        return result;
      },
      template: function(str, obj) {
        if (obj == null) {
          obj = null;
        }
        if (obj) {
          _.each(obj, (function(_this) {
            return function(v, k) {
              if (!v) {
                v = "";
              }
              return str = str.replace("${" + k + "}", v);
            };
          })(this));
        }
        return str;
      },
      makeDir: function(dir, callback) {
        var arr, isDir, toDir;
        if (!dir) {
          return false;
        }
        dir = path.normalize(dir);
        dir = dir.replace(/(.*)(\/|\\).*?\..*?$/, "$1");
        arr = dir.split("/");
        toDir = "";
        isDir = true;
        _.each(arr, function(v, i) {
          var error;
          toDir = i === 0 ? v : "/" + v;
          try {
            return fs.statSync(toDir);
          } catch (_error) {
            error = _error;
            isDir = false;
            return false;
          }
        });
        if (isDir === false) {
          return mkdirp.sync(dir);
        }
      },
      dirIterator: function(options) {
        var OPTIONS, iterator, that;
        that = this;
        OPTIONS = {
          dir: null,
          filter: function() {
            return true;
          },
          onCompleate: function() {},
          onGetFile: function(filePath) {}
        };
        iterator = function(options) {
          var error, files, len, o;
          o = _.extend({}, OPTIONS, options);
          try {
            files = fs.readdirSync(o.dir);
          } catch (_error) {
            error = _error;
            that.showMessage("ERROR.FILE", {
              file: o.dir
            });
            process.exit(1);
          }
          len = files.length;
          files.map(function(file) {
            return path.join(o.dir, file);
          }).filter(function(filePath) {
            return o.filter(filePath);
          }).forEach(function(filePath) {
            if (fs.statSync(filePath).isDirectory()) {
              iterator({
                dir: filePath,
                filter: o.filter,
                onGetFile: o.onGetFile
              });
            } else {
              o.onGetFile(filePath);
            }
            len -= 1;
            if (len <= 1) {
              return o.onCompleate();
            }
          });
          return false;
        };
        return iterator(options);
      }
    };
  })(global);

}).call(this);
