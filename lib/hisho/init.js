// Generated by CoffeeScript 1.7.1
(function() {
  (function(global) {
    var exec, fs, hisho, path, prompt, _;
    fs = require('fs');
    path = require('path');
    _ = require('underscore');
    exec = require('child_process').exec;
    prompt = require('prompt');
    hisho = {};
    return module.exports = {
      run: function() {
        var currentVersion, error, files, hishoVersion, setting;
        hisho = global.hisho = require("./util/util");
        hisho.showMessage("INIT.START");
        hisho.showMessage("COMMON.CHECK", {
          text: "Target Folder"
        });
        hisho.showMessage(process.cwd() + "\n");
        files = fs.readdirSync("./");
        if (files.length === 0) {
          hisho.showMessage("INIT.CHECK.CREATE");
        } else {
          try {
            hishoVersion = require("../../package.json").version;
            currentVersion = require(path.normalize(process.cwd() + "/package.json")).version;
          } catch (_error) {
            error = _error;
            hisho.showMessage("INIT.CHECK.OVERRIDE");
          }
          if (hishoVersion === currentVersion) {
            hisho.showMessage("INIT.CHECK.OVERRIDE");
          } else {
            hisho.showMessage("INIT.CHECK.VERSION");
          }
        }
        prompt.start();
        setting = {
          properties: {
            answer: {
              required: true
            }
          }
        };
        prompt.get(setting, (function(_this) {
          return function(err, result) {
            if (result.answer === "y") {
              _this.create();
              return _this.installNpm(function() {
                return hisho.showMessage("COMMON.SUCCESS", {
                  text: '"hisho init" task is completed.'
                });
              });
            } else {
              return process.exit(0);
            }
          };
        })(this));
        return this;
      },
      create: function() {
        var targetPath;
        hisho.showMessage("INIT.START.COPY");
        targetPath = path.normalize(hisho.cliPath + "/files");
        hisho.dirIterator({
          dir: targetPath,
          onGetFile: (function(_this) {
            return function(filePath) {
              return _this._setCopyFile(filePath);
            };
          })(this)
        });
        hisho.showMessage("INIT.SUCCESS.COPY");
        return this;
      },
      _setCopyFile: function(filePath) {
        var basePath, error, outputPath, str;
        basePath = filePath.replace(/^.*?files.(.*?)$/g, "$1");
        outputPath = path.normalize(process.cwd() + "/" + basePath);
        try {
          str = fs.readFileSync(filePath, 'utf-8');
        } catch (_error) {
          error = _error;
          hisho.showMessage("ERROR.FILE", {
            file: filePath
          });
          process.exit(0);
        }
        if (str) {
          hisho.makeDir(outputPath);
          fs.writeFileSync(outputPath, str, 'utf8');
          hisho.showMessage("COMMON.ARROW", {
            text: "GET " + basePath
          });
        }
        return this;
      },
      installNpm: function(callback) {
        var cmd;
        hisho.showMessage("INIT.START.NPM");
        cmd = "npm install";
        exec(cmd, function(err, stdout, stderr) {
          var errorTexts;
          if (err !== null) {
            errorTexts = String(err).split(/\n/);
            _.each(errorTexts, (function(_this) {
              return function(v) {
                return hisho.showMessage("COMMON.ARROW.RED", {
                  text: v
                });
              };
            })(this));
            hisho.showMessage("INIT.ERROR.NPM");
            return process.exit(1);
          } else {
            hisho.showMessage("COMMON.ARROW", {
              text: stdout
            });
            hisho.showMessage("COMMON.ARROW", {
              text: stderr
            });
            hisho.showMessage("INIT.SUCCESS.NPM");
            return callback();
          }
        });
        return this;
      }
    };
  })(global);

}).call(this);
